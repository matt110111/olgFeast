services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: olgfeast_db
    environment:
      POSTGRES_DB: olgfeast
      POSTGRES_USER: olgfeast
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U olgfeast -d olgfeast"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - olgfeast_network

  # Redis for WebSocket channels
  redis:
    image: redis:7-alpine
    container_name: olgfeast_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - olgfeast_network

  # FastAPI Backend (using pre-built image from GitHub Container Registry)
  backend:
    image: ghcr.io/${GITHUB_OWNER:-matt110111}/olgfeast-backend:latest
    container_name: olgfeast_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      SECRET_KEY: ${SECRET_KEY}
      DEBUG: ${DEBUG}
      ENVIRONMENT: ${ENVIRONMENT}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - olgfeast_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./setup_database.py:/app/setup_database.py:ro

  # React Frontend (using pre-built image from GitHub Container Registry)
  frontend:
    image: ghcr.io/${GITHUB_OWNER:-matt110111}/olgfeast-frontend:latest
    container_name: olgfeast_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - olgfeast_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Watchtower for automatic deployments (optional)
  # Uncomment the section below to enable automatic pulling of new images
  # watchtower:
  #   image: containrrr/watchtower
  #   container_name: olgfeast_watchtower
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     - WATCHTOWER_POLL_INTERVAL=300  # Check every 5 minutes
  #     - WATCHTOWER_CLEANUP=true       # Remove old images
  #     - WATCHTOWER_INCLUDE_RESTARTING=true
  #     - WATCHTOWER_REVIVE_STOPPED=false
  #     - WATCHTOWER_LABEL_ENABLE=true  # Only watch containers with watchtower label
  #   restart: unless-stopped
  #   networks:
  #     - olgfeast_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  olgfeast_network:
    driver: bridge
    name: olgfeast_network



